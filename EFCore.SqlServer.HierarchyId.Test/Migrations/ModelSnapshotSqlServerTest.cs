// Adapted From: https://github.com/dotnet/efcore/blob/v3.1.0/test/EFCore.Design.Tests/Migrations/ModelSnapshotSqlServerTest.cs
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using Microsoft.EntityFrameworkCore.Design.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations.Design;
using Microsoft.EntityFrameworkCore.Migrations.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Storage;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Xunit;

namespace Microsoft.EntityFrameworkCore.SqlServer.Migrations
{
    public class ModelSnapshotSqlServerTest : IClassFixture<NeedsBuildReferencesFixture>
    {
        private readonly NeedsBuildReferencesFixture _fixture;

        public ModelSnapshotSqlServerTest(NeedsBuildReferencesFixture fixture)
        {
            _fixture = fixture;
        }

        private class EntityWithHierarchyId
        {
            public HierarchyId Id { get; set; }
        }

        #region SeedData

        [Fact]
        public virtual void SeedData_annotations_are_stored_in_snapshot()
        {
            static List<IProperty> getAllProperties(IModel model)
                => model
                    .GetEntityTypes()
                    .SelectMany(m => m.GetProperties())
                    .OrderBy(p => p.DeclaringEntityType.Name)
                    .ThenBy(p => p.Name)
                    .ToList();

            var hierarchyId1 = HierarchyId.GetRoot();
            var hierarchyId2 = HierarchyId.Parse("/1/");

            Test(
                builder =>
                {
                    builder.Entity<EntityWithHierarchyId>(
                        eb =>
                        {
                            eb.HasData(
                                new EntityWithHierarchyId
                                {
                                    Id = hierarchyId1
                                },
                                new
                                {
                                    Id = hierarchyId2
                                });
                        });
                },
                @"// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RootNamespace
{
    [DbContext(typeof(DbContext))]
    partial class Snapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation(""Relational:MaxIdentifierLength"", 128)
                .HasAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity(""Microsoft.EntityFrameworkCore.SqlServer.Migrations.ModelSnapshotSqlServerTest+EntityWithHierarchyId"", b =>
                {
                    b.Property<HierarchyId>(""Id"")
                        .HasColumnType(""hierarchyid"");

                    b.HasKey(""Id"");

                    b.ToTable(""EntityWithHierarchyId"");

                    b.HasData(
                        new
                        {
                            Id = Microsoft.EntityFrameworkCore.HierarchyId.Parse(""/"")
                        },
                        new
                        {
                            Id = Microsoft.EntityFrameworkCore.HierarchyId.Parse(""/1/"")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
",
                (snapshotModel, originalModel) =>
                {
                    var originalProperties = getAllProperties(originalModel);
                    var snapshotProperties = getAllProperties(snapshotModel);

                    Assert.Equal(originalProperties.Count, snapshotProperties.Count);

                    for (var i = 0; i < originalProperties.Count; i++)
                    {
                        var originalProperty = originalProperties[i];
                        var snapshotProperty = snapshotProperties[i];

                        Assert.Equal(originalProperty.DeclaringEntityType.Name, snapshotProperty.DeclaringEntityType.Name);
                        Assert.Equal(originalProperty.Name, snapshotProperty.Name);

                        Assert.Equal(originalProperty.GetColumnType(), snapshotProperty.GetColumnType());
                        Assert.Equal(originalProperty.GetMaxLength(), snapshotProperty.GetMaxLength());
                        Assert.Equal(originalProperty.IsUnicode(), snapshotProperty.IsUnicode());
                        Assert.Equal(originalProperty.IsConcurrencyToken, snapshotProperty.IsConcurrencyToken);
                        Assert.Equal(originalProperty.IsFixedLength(), snapshotProperty.IsFixedLength());
                    }

                    Assert.Collection(
                        snapshotModel.GetEntityTypes().SelectMany(e => e.GetSeedData()),
                        seed =>
                        {
                            Assert.Equal(hierarchyId1, seed["Id"]);
                        },
                        seed =>
                        {
                            Assert.Equal(hierarchyId2, seed["Id"]);
                        });
                });
        }

        #endregion

        protected ICollection<BuildReference> GetReferences()
            => _fixture.GetBuildReferences(
                BuildReference.ByName("Microsoft.EntityFrameworkCore"),
                BuildReference.ByName("Microsoft.EntityFrameworkCore.Relational"),
                BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer"),
                BuildReference.ByName("EntityFrameworkCore.SqlServer.HierarchyId.Abstractions"));
                

        protected void Test(Action<ModelBuilder> buildModel, string expectedCode, Action<IModel> assert)
            => Test(buildModel, expectedCode, (m, _) => assert(m));

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "EF1001:Internal EF Core API usage.", Justification = "Uses efcore internal apis")]
        protected void Test(Action<ModelBuilder> buildModel, string expectedCode, Action<IModel, IModel> assert)
        {
            var modelBuilder = CreateConventionalModelBuilder();
            modelBuilder.HasChangeTrackingStrategy(ChangeTrackingStrategy.Snapshot);
            modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
            buildModel(modelBuilder);

            var model = modelBuilder.FinalizeModel();

            Test(model, expectedCode, assert);
        }

        protected void Test(IModel model, string expectedCode, Action<IModel> assert)
            => Test(model, expectedCode, (m, _) => assert(m));

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "EF1001:Internal EF Core API usage.", Justification = "Uses efcore internal apis")]
        protected void Test(IModel model, string expectedCode, Action<IModel, IModel> assert)
        {
            var sqlServerTypeMappingSource = new SqlServerTypeMappingSource(
                TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
                new RelationalTypeMappingSourceDependencies(
                    new IRelationalTypeMappingSourcePlugin[]
                    {
                        new SqlServerHierarchyIdTypeMappingSourcePlugin(),
                    }));
            var codeHelper = new CSharpHelper(
                sqlServerTypeMappingSource);

            var generator = new CSharpMigrationsGenerator(
                new MigrationsCodeGeneratorDependencies(sqlServerTypeMappingSource),
                new CSharpMigrationsGeneratorDependencies(
                    codeHelper,
                    new CSharpMigrationOperationGenerator(
                        new CSharpMigrationOperationGeneratorDependencies(
                            codeHelper)),
                    new CSharpSnapshotGenerator(
                        new CSharpSnapshotGeneratorDependencies(
                            codeHelper, sqlServerTypeMappingSource))));

            var code = generator.GenerateSnapshot("RootNamespace", typeof(DbContext), "Snapshot", model);

            Assert.Equal(expectedCode, code, ignoreLineEndingDifferences: true);

            var build = new BuildSource { Sources = { code } };

            foreach (var buildReference in GetReferences())
            {
                build.References.Add(buildReference);
            }

            var assembly = build.BuildInMemory();
            var factoryType = assembly.GetType("RootNamespace.Snapshot");

            var buildModelMethod = factoryType.GetTypeInfo().GetMethod(
                "BuildModel",
                BindingFlags.Instance | BindingFlags.NonPublic,
                null,
                new[] { typeof(ModelBuilder) },
                null);

            var builder = new ModelBuilder(new ConventionSet());
            builder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);

            buildModelMethod.Invoke(
                Activator.CreateInstance(factoryType),
                new object[] { builder });

            var modelFromSnapshot = new SnapshotModelProcessor(new TestOperationReporter()).Process(builder.Model);

            assert(modelFromSnapshot, model);
        }

        protected ModelBuilder CreateConventionalModelBuilder()
        {
            var serviceProvider = new ServiceCollection()
                .AddEntityFrameworkSqlServer()
                .AddEntityFrameworkSqlServerHierarchyId()
                .AddDbContext<DbContext>(
                    (p, o) =>
                        o.UseSqlServer("Server=.", b => b.UseHierarchyId())
                            .UseInternalServiceProvider(p))
                .BuildServiceProvider();

            using (var serviceScope = serviceProvider.GetRequiredService<IServiceScopeFactory>().CreateScope())
            {
                using (var context = serviceScope.ServiceProvider.GetService<DbContext>())
                {
                    return new ModelBuilder(ConventionSet.CreateConventionSet(context));
                }
            }
        }
    }
}